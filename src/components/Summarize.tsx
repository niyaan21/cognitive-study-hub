
import React, { useState, useEffect } from 'react';
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Skeleton } from "@/components/ui/skeleton";
import { openRouterService } from '@/services/openRouterService';
import { StudyMaterial } from '@/services/fileProcessorService';
import { Download, RefreshCw, Loader2 } from "lucide-react";
import { jsPDF } from "jspdf";
import { toast } from "sonner";

interface SummarizeProps {
  material: StudyMaterial | null;
}

const Summarize: React.FC<SummarizeProps> = ({ material }) => {
  const [summary, setSummary] = useState<string | null>(null);
  const [isGenerating, setIsGenerating] = useState(false);
  const [isDownloading, setIsDownloading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [autoGenerated, setAutoGenerated] = useState(false);

  // Auto-summarize when material changes
  useEffect(() => {
    if (material && !material.summary) {
      generateSummary();
      setAutoGenerated(true);
    } else if (material?.summary) {
      setSummary(material.summary);
      setAutoGenerated(true);
    }
  }, [material]);

  const generateSummary = async () => {
    if (!material) return;

    setIsGenerating(true);
    setError(null);
    
    try {
      // Enhanced summarization prompt
      const result = await openRouterService.chat([
        { 
          role: 'system', 
          content: 'You are an expert academic summarizer. Create a professional, well-structured summary with clear sections, key points, and main takeaways. Format appropriately with headings and bullet points where needed.'
        },
        { 
          role: 'user', 
          content: `Create a comprehensive, professional summary of the following material titled "${material.name}":\n\n${material.content.substring(0, 8000)}`
        }
      ]);
      
      setSummary(result);
      toast.success("Summary generated successfully!");
    } catch (err) {
      console.error('Error generating summary:', err);
      setError('Failed to generate summary. Please try again.');
      toast.error("Failed to generate summary.");
    } finally {
      setIsGenerating(false);
    }
  };

  const handleDownloadPDF = async () => {
    if (!summary) return;
    
    setIsDownloading(true);
    try {
      const doc = new jsPDF();
      
      // Add title
      const fileName = material ? `Summary - ${material.name}` : "Document Summary";
      doc.setFontSize(18);
      doc.text(fileName, 20, 20);
      
      // Add content
      doc.setFontSize(12);
      
      // Split content into lines that fit the page width
      const textLines = doc.splitTextToSize(summary, 170);
      doc.text(textLines, 20, 30);
      
      // Save the PDF
      doc.save(`${fileName.replace(/[^a-zA-Z0-9]/g, '_')}.pdf`);
      toast.success("Summary PDF downloaded!");
    } catch (error) {
      console.error('Error downloading PDF:', error);
      toast.error("Failed to download PDF. Please try again.");
    } finally {
      setIsDownloading(false);
    }
  };

  if (!material) {
    return (
      <div className="text-center p-6">
        <p>Please select a study material to generate a summary.</p>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h2 className="text-2xl font-bold">Summary</h2>
        <div className="flex space-x-2">
          <Button 
            onClick={generateSummary} 
            disabled={isGenerating}
            variant="outline"
          >
            {isGenerating ? (
              <>
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                Generating...
              </>
            ) : (
              <>
                <RefreshCw className="mr-2 h-4 w-4" />
                Regenerate
              </>
            )}
          </Button>
          
          {summary && (
            <Button 
              onClick={handleDownloadPDF}
              disabled={isDownloading || !summary}
            >
              {isDownloading ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  Downloading...
                </>
              ) : (
                <>
                  <Download className="mr-2 h-4 w-4" />
                  Download PDF
                </>
              )}
            </Button>
          )}
        </div>
      </div>

      {error && (
        <Alert variant="destructive">
          <AlertDescription>{error}</AlertDescription>
        </Alert>
      )}

      {isGenerating ? (
        <Card>
          <CardContent className="p-6">
            <div className="space-y-2">
              <Skeleton className="h-4 w-full" />
              <Skeleton className="h-4 w-[90%]" />
              <Skeleton className="h-4 w-[95%]" />
              <Skeleton className="h-4 w-[85%]" />
              <Skeleton className="h-4 w-[90%]" />
            </div>
          </CardContent>
        </Card>
      ) : summary ? (
        <Card>
          <CardContent className="p-6">
            <div className="prose dark:prose-invert max-w-none">
              {autoGenerated && !isGenerating && (
                <div className="mb-4 text-sm text-muted-foreground">
                  Auto-generated professional summary
                </div>
              )}
              {summary.split('\n').map((paragraph, index) => {
                // Check if the paragraph looks like a heading
                if (/^#{1,6}\s.+/.test(paragraph) || /^[A-Z\s]{2,}:/.test(paragraph)) {
                  const level = paragraph.startsWith('#') ? paragraph.match(/^(#+)/)?.[0].length || 1 : 2;
                  const text = paragraph.replace(/^#+\s/, '').replace(/^[A-Z\s]{2,}:/, '');
                  const HeadingTag = `h${Math.min(level, 6)}` as keyof JSX.IntrinsicElements;
                  return <HeadingTag key={index} className="font-bold mt-4">{text}</HeadingTag>;
                }
                // Return regular paragraph
                return paragraph.trim() ? <p key={index} className="my-2">{paragraph}</p> : null;
              })}
            </div>
          </CardContent>
        </Card>
      ) : (
        <Card>
          <CardContent className="p-6 text-center">
            <p>No summary available for this material yet.</p>
          </CardContent>
        </Card>
      )}
    </div>
  );
};

export default Summarize;
