
import React, { useState, useEffect } from 'react';
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { openRouterService } from '@/services/openRouterService';
import { StudyMaterial } from '@/services/fileProcessorService';
import { Skeleton } from "@/components/ui/skeleton";

interface FlashcardsProps {
  material: StudyMaterial | null;
}

interface Flashcard {
  question: string;
  answer: string;
}

const Flashcards: React.FC<FlashcardsProps> = ({ material }) => {
  const [flashcards, setFlashcards] = useState<Flashcard[]>([]);
  const [currentIndex, setCurrentIndex] = useState(0);
  const [isFlipped, setIsFlipped] = useState(false);
  const [isGenerating, setIsGenerating] = useState(false);
  const [autoGenerated, setAutoGenerated] = useState(false);

  // Auto-generate flashcards when material changes
  useEffect(() => {
    if (material && flashcards.length === 0) {
      generateFlashcards();
      setAutoGenerated(true);
    }
  }, [material]);

  const generateFlashcards = async () => {
    if (!material) return;

    setIsGenerating(true);
    try {
      const generatedCards = await openRouterService.generateFlashcards(material.content);
      setFlashcards(generatedCards);
      setCurrentIndex(0);
      setIsFlipped(false);
    } catch (error) {
      console.error('Error generating flashcards:', error);
    } finally {
      setIsGenerating(false);
    }
  };

  const handleNext = () => {
    if (currentIndex < flashcards.length - 1) {
      setCurrentIndex(prev => prev + 1);
      setIsFlipped(false);
    }
  };

  const handlePrevious = () => {
    if (currentIndex > 0) {
      setCurrentIndex(prev => prev - 1);
      setIsFlipped(false);
    }
  };

  if (!material) {
    return (
      <div className="text-center p-6">
        <p>Please select a study material to generate flashcards.</p>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h2 className="text-2xl font-bold">Flashcards</h2>
        <Button onClick={generateFlashcards} disabled={isGenerating}>
          {isGenerating ? 'Generating...' : 'Regenerate Flashcards'}
        </Button>
      </div>

      {isGenerating ? (
        <Card className="min-h-[300px]">
          <CardContent className="p-6 flex items-center justify-center">
            <div className="space-y-4 w-full">
              <Skeleton className="h-6 w-[80%] mx-auto" />
              <Skeleton className="h-4 w-[60%] mx-auto" />
              <div className="text-center text-sm text-muted-foreground mt-4">
                Generating flashcards...
              </div>
            </div>
          </CardContent>
        </Card>
      ) : flashcards.length > 0 ? (
        <div className="space-y-4">
          {autoGenerated && (
            <div className="text-sm text-muted-foreground">
              Auto-generated flashcards
            </div>
          )}
          <Card 
            className="min-h-[300px] cursor-pointer"
            onClick={() => setIsFlipped(!isFlipped)}
          >
            <CardContent className="p-6 flex items-center justify-center text-center">
              <div className="text-lg">
                {isFlipped 
                  ? flashcards[currentIndex].answer 
                  : flashcards[currentIndex].question}
              </div>
            </CardContent>
          </Card>

          <div className="flex justify-between">
            <Button 
              variant="outline" 
              onClick={handlePrevious}
              disabled={currentIndex === 0}
            >
              Previous
            </Button>
            <span className="py-2">
              {currentIndex + 1} / {flashcards.length}
            </span>
            <Button 
              variant="outline" 
              onClick={handleNext}
              disabled={currentIndex === flashcards.length - 1}
            >
              Next
            </Button>
          </div>
        </div>
      ) : (
        <Card>
          <CardContent className="p-6 text-center">
            <p>Click "Generate Flashcards" to create flashcards from your material.</p>
          </CardContent>
        </Card>
      )}
    </div>
  );
};

export default Flashcards;
