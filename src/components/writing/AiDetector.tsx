
import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { toast } from "sonner";
import { Card, CardContent } from '@/components/ui/card';
import { Progress } from '@/components/ui/progress';
import { openRouterService } from '@/services/openRouterService';
import { Loader2, AlertTriangle, CheckCircle } from 'lucide-react';

const AiDetector = () => {
  const [text, setText] = useState('');
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [result, setResult] = useState<{
    aiScore: number;
    humanScore: number;
    analysis: string;
    confidence: 'low' | 'medium' | 'high';
    indicators: string[];
  } | null>(null);

  const handleAnalyze = async () => {
    if (text.trim().length < 100) {
      toast.warning("Please enter at least 100 characters for accurate detection");
      return;
    }

    setIsAnalyzing(true);
    setResult(null);

    try {
      const prompt = `
        You are an AI content detector with advanced linguistic analysis capabilities. Analyze the following text
        and determine whether it was likely written by a human or generated by AI. 
        
        Provide a detailed assessment looking at:
        1. Linguistic patterns
        2. Stylistic consistency
        3. Semantic coherence
        4. Complexity variation
        5. Idiomatic language use
        
        Return your analysis as a JSON object with the following structure:
        {
          "aiScore": number between 0-100,
          "humanScore": number between 0-100,
          "analysis": detailed analysis explanation,
          "confidence": "low", "medium", or "high",
          "indicators": [list of key indicators that influenced the assessment]
        }
        
        The text to analyze is:
        ---
        ${text}
        ---
        
        Make sure the AI and human scores add up to 100.
      `;

      const response = await openRouterService.chat([
        { role: 'system', content: "You are an advanced AI content detection analyzer with expertise in linguistic analysis." },
        { role: 'user', content: prompt }
      ]);

      try {
        // Extract JSON from the response
        const jsonMatch = response.match(/\{[\s\S]*\}/);
        const data = jsonMatch ? JSON.parse(jsonMatch[0]) : null;
        
        if (data && typeof data.aiScore === 'number' && data.analysis) {
          setResult({
            aiScore: data.aiScore,
            humanScore: data.humanScore || (100 - data.aiScore),
            analysis: data.analysis,
            confidence: data.confidence || 'medium',
            indicators: data.indicators || []
          });
          
          toast.success("Analysis complete!");
        } else {
          throw new Error("Invalid response format");
        }
      } catch (parseError) {
        console.error("Failed to parse detection response:", parseError);
        toast.error("Failed to analyze text. Please try again.");
      }
    } catch (error) {
      console.error("AI detection error:", error);
      toast.error("Failed to analyze content. Please try again.");
    } finally {
      setIsAnalyzing(false);
    }
  };

  const getScoreColor = (score: number) => {
    if (score < 30) return "text-green-500";
    if (score < 70) return "text-yellow-500";
    return "text-red-500";
  };

  const getConfidenceLabel = (confidence: 'low' | 'medium' | 'high') => {
    switch (confidence) {
      case 'low': return "Low confidence: This assessment could be incorrect";
      case 'medium': return "Medium confidence: Reasonable certainty in this assessment";
      case 'high': return "High confidence: Strong certainty in this assessment";
      default: return "";
    }
  };

  return (
    <div className="space-y-6">
      <div className="space-y-2">
        <Textarea 
          value={text} 
          onChange={(e) => setText(e.target.value)}
          placeholder="Paste text here to check if it was written by AI..."
          className="min-h-[250px]"
        />
        <div className="flex justify-between">
          <div className="text-sm text-muted-foreground">
            {text.length} characters
          </div>
          <div className="space-x-2">
            <Button variant="outline" onClick={() => setText('')} disabled={!text || isAnalyzing}>
              Clear
            </Button>
            <Button 
              onClick={handleAnalyze} 
              disabled={text.length < 100 || isAnalyzing}
            >
              {isAnalyzing ? (
                <><Loader2 className="mr-2 h-4 w-4 animate-spin" /> Analyzing...</>
              ) : (
                'Analyze Content'
              )}
            </Button>
          </div>
        </div>
      </div>

      {result && (
        <Card>
          <CardContent className="pt-6">
            <div className="space-y-8">
              <div className="space-y-2">
                <div className="flex justify-between">
                  <div className="font-semibold">AI Probability Score</div>
                  <div className={`font-bold ${getScoreColor(result.aiScore)}`}>
                    {result.aiScore}%
                  </div>
                </div>
                <Progress value={result.aiScore} className="h-2" />
                <div className="flex items-center text-sm mt-1">
                  {result.confidence && (
                    <span className="text-muted-foreground">
                      {getConfidenceLabel(result.confidence)}
                    </span>
                  )}
                </div>
              </div>
              
              <div className="space-y-4">
                <div className="flex items-center gap-2">
                  {result.aiScore > 70 ? (
                    <AlertTriangle className="h-5 w-5 text-yellow-500" />
                  ) : (
                    <CheckCircle className="h-5 w-5 text-green-500" />
                  )}
                  <h3 className="font-semibold">
                    {result.aiScore > 70 
                      ? "This text appears to be AI-generated" 
                      : result.aiScore > 30 
                        ? "This text shows mixed characteristics"
                        : "This text appears to be human-written"}
                  </h3>
                </div>
                
                <div className="text-sm space-y-4">
                  <p>{result.analysis}</p>
                  
                  {result.indicators && result.indicators.length > 0 && (
                    <div className="space-y-2">
                      <h4 className="font-medium">Key Indicators:</h4>
                      <ul className="list-disc pl-5 space-y-1">
                        {result.indicators.map((indicator, index) => (
                          <li key={index}>{indicator}</li>
                        ))}
                      </ul>
                    </div>
                  )}
                </div>
              </div>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
};

export default AiDetector;
